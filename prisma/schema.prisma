// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  role          String?    @default("user")
  accounts      Account[]
  sessions      Session[]
  novels        Novel[]
  ratings       Rating[]
  categories    Category[] // Menambahkan relasi balik ke Category

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  novels    Novel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Novel {
  id         String    @id @default(cuid()) // Menggunakan `String` agar sesuai dengan foreign key di `Chapter` dan `Rating`
  title      String
  content    String
  tags       String[]
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  categoryId String // Mengubah `categoryId` menjadi `String` agar sesuai dengan tipe `id` di Category
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ratings    Rating[]
  chapters   Chapter[]
}

model Chapter {
  id        String   @id @default(cuid()) // Menggunakan `String` untuk konsistensi tipe ID
  title     String
  content   String
  number    Int
  novelId   String // Mengubah `novelId` menjadi `String` agar sesuai dengan tipe `id` di Novel
  novel     Novel    @relation(fields: [novelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String
  novelId String // Mengubah `novelId` menjadi `String` agar sesuai dengan tipe `id` di Novel
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  novel   Novel  @relation(fields: [novelId], references: [id])
}
